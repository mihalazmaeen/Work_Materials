Controller 
  public function get_datatable_data(Request $request)
    {
        if(permission('user-group-access')){
            if($request->ajax()){
                if (!empty($request->name)) {
                    $this->model->setName($request->name);
                }
                

                $this->set_datatable_default_property($request);
                $list = $this->model->getDatatableList();
                $customers = $this->model->get_datatable_query()->get();
                // dd($customers);

                $data = [];
                $no = $request->input('start');
                foreach ($list as $value) {
                    $no++;
                    $action = '';

                    if(permission('user-group-edit')){
                        $action .= ' <a class="dropdown-item edit_data" data-id="' . $value->id . '"><i class="fas fa-edit text-primary"></i> Edit</a>';
                    }
                    // if(permission('user-group-view')){
                    //     $action .= ' <a class="dropdown-item view_data" data-id="' . $value->id . '"><i class="fas fa-eye text-success"></i> View</a>';
                    // }
                    if(permission('user-group-delete')){
                        $action .= ' <a class="dropdown-item delete_data"  data-id="' . $value->id . '" data-name="' . $value->group_name . '"><i class="fas fa-trash text-danger"></i> Delete</a>';
                    }

                    $row = [];

                    if(permission('user-group-bulk-delete')){
                        $row[] = table_checkbox($value->id);
                    }
                    $row[] = $no;
                    // $row[] = $value->id;
                    $row[] = $value->group_name;
                    $row[] = $value->group_description;
                     // Now it executes the query and returns a collection of models

                    foreach ($customers as $value) {
                        // Now you can access your custom attribute as a model property
                        $row[] = $value->customer_names;
                    }
          
                    $row[] = permission('user-group-edit') ? change_status($value->id,$value->status,$value->group_name) : STATUS_LABEL[$value->status];

                    $row[] = action_button($action);
                    
                    $data[] = $row;
                }
                return $this->datatable_draw($request->input('draw'),$this->model->count_all(),
                 $this->model->count_filtered(), $data);
            }else{
                $output = $this->access_blocked();
            }

            return response()->json($output);
        }
    }

Model
  public function getCustomerNamesAttribute()
    {
        // Decode the JSON-encoded customer_id to get an array of IDs
        $customerIds = $this->customer_id;
        
        if (is_array($customerIds)) {
            // Fetch the customer names based on the decoded IDs
            $customers = Customers::whereIn('id', $customerIds)->pluck('name');

            // dd($customers);
            
            // Return the names as a comma-separated string
            return implode(', ', $customers->toArray());
        }

        return ''; // Return an empty string if customer_id is not a valid JSON array
    }

    public function get_datatable_query()
    {
        if(permission('product-bulk-delete')){
            $this->column_order = [null,'id','group_name', 'group_description', 'customer_id','status',null];
        } else {
            $this->column_order = ['id','group_name', 'group_description', 'customer_id','status',null];
        }

        $query = self::query(); // Start an Eloquent query

        if (!empty($this->name)) {
            $query->where('group_name', 'like', '%' . $this->name . '%');
        }

        // Ordering logic
        if (isset($this->orderValue) && isset($this->dirValue)) {
            $query->orderBy($this->column_order[$this->orderValue], $this->dirValue);
        } else if (isset($this->order)) {
            $query->orderBy(key($this->order), $this->order[key($this->order)]);
        }

        return $query; // At this point, it's still a query builder instance
    }